package com.zsb.bluex.core.launch;

import com.zsb.bluex.core.def.FunctionDef;
import com.zsb.bluex.core.def.ParamDef;
import com.zsb.bluex.core.def.TypeDef;

public class AutoGeneratedHelper {

    public static FunctionDef getter(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("Get" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:GETTER:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Name",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Var",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|Getter函数");
        def.setDescription("从上下文环境中根据Name获取变量");
        def.setDisplayName("Get " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":GETTER()");
        return def;
    }

    public static FunctionDef setter(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("Set" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:SETTER:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Name",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.getInputParamDefs().add(
                new ParamDef(
                        "Var",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|Setter函数");
        def.setDescription("从上下文环境中根据Name设置变量");
        def.setDisplayName("Set " + clazz.getSimpleName());
        def.setExecutable(true);
        def.setSignature(clazz.getName() + ":SETTER(INPUT<String>Name,INPUT<" + clazz.getSimpleName() + ">Var)");
        return def;
    }

    public static FunctionDef constructor(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("Construct" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:CONSTRUCTOR:" + clazz.getName());
        // 遍历所有字段
        TypeDef typeDef = MetaHolder.CLASS_DEFINITION.get(clazz.getName());
        typeDef.getFields().forEach((fieldName, fieldTypeDef) -> def.getInputParamDefs().add(
                new ParamDef(
                        fieldName,
                        fieldTypeDef
                )
        ));
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Var",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|构造函数");
        def.setDescription("构造函数");
        def.setDisplayName("Constructor " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":CONSTRUCTOR()");
        return def;
    }

    public static FunctionDef fromJSON(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("FromJSON" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:FROMJSON:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Json",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Obj",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|类型转换|JSON -> 对象");
        def.setDescription("将JSON字符串转为对象");
        def.setDisplayName("FromJSON " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":FROMJSON()");
        return def;
    }

    public static FunctionDef toJSON(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("ToJSON" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:TOJSON:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Obj",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Json",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|类型转换|对象 -> JSON");
        def.setDescription("将对象转为JSON字符串");
        def.setDisplayName("ToJSON " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":TOJSON()");
        return def;
    }

    public static FunctionDef fromXML(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("FromXML" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:FROMXML:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Xml",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Obj",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|类型转换|XML -> 对象");
        def.setDescription("将XML字符串转为对象");
        def.setDisplayName("FromXML " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":FROMXML()");
        return def;
    }

    public static FunctionDef toXML(Class<?> clazz) {
        FunctionDef def = new FunctionDef();
        def.setName("ToXML" + " " + clazz.getSimpleName());
        def.setQualifiedName("GENERATED:TOXML:" + clazz.getName());
        def.getInputParamDefs().add(
                new ParamDef(
                        "Obj",
                        MetaHolder.CLASS_DEFINITION.get(clazz.getName())
                )
        );
        def.getOutputParamDefs().add(
                new ParamDef(
                        "Xml",
                        MetaHolder.PRIMITIVE_DEFINITION.get("java.lang.String")
                )
        );
        def.setCategory("用户自定义Class|" + clazz.getSimpleName() + "|类型转换|对象 -> XML");
        def.setDescription("将对象转为XML字符串");
        def.setDisplayName("ToXML " + clazz.getSimpleName());
        def.setExecutable(false);
        def.setSignature(clazz.getName() + ":TOXML()");
        return def;
    }
}
